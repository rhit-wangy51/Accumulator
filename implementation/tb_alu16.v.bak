module tb_alu16();

//input
reg [15:0] A,
reg [15:0] B,
reg [2:0] OP,
reg [0:0] CLK,

//output
wire [15:0] Out;
wire [0:0] Zero

alu16 test_alu(
	.A(A),
	.B(B),
	.OP(OP),
	.CLK(CLK),
	.Out(Out),
	Zero(Zero)
);

parameter HALF_PERIOD = 50;
integer counter = 0;


initial begin
    CLK = 0;
    forever begin
        #(HALF_PERIOD);
        CLK = ~CLK;
	 end
end

initial begin

	A = 101;
	B = 001;
	#(2*HALF_PERIOD)
	
	OP = 000
	#(2*HALF_PERIOD)
	
// AND
	$display("Testing AND.");
	
	
	if(Out != 001) begin
		 $display("%t (AND) Error at output = %d, expecting = 001", $time, Out);
	 end
	 else begin
		$display("Testing AND PASS.");
	 end
	 
// test OR
	$display("Testing OR.");
	
	OP = 001;
	#(2*HALF_PERIOD)
	
	if(Out != 101) begin
		 $display("%t (OR) Error at output = %d, expecting = 101", $time, Out);
	 end
	 else begin
		$display("Testing OR PASS.");
	 end
	 
// test OR
	$display("Testing OR.");
	
	OP = 001;
	#(2*HALF_PERIOD)
	
	if(Out != 101) begin
		 $display("%t (OR) Error at output = %d, expecting = 101", $time, Out);
	 end
	 else begin
		$display("Testing OR PASS.");
	 end
	 
	 
// test update on pos edge
	$display("Testing update on pos edge.");
	
	In = 2;
	#(0.5*HALF_PERIOD)
	$display("%t ", $time);
	if(Out != 1) begin
		 $display("%t (COUNT UP) Error at output = %d, expecting = 1", $time, Out);
	 end
	 
	 #(1.5*HALF_PERIOD)
	 $display("%t ", $time);
	if(Out != 2) begin
		 $display("%t (COUNT UP) Error at output = %d, expecting = 2", $time, Out);
	 end
	$display("Testing update on pos edge PASS.");
	
end
endmodule